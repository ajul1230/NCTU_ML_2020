# -*- coding: utf-8 -*-
"""HW1_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkIJ_JPif1kRWB1FPCnj1jA-cjl_l6Vn

# **(b)**

一樣先引入該用的套件及資料並切分訓練集與驗證集。sigmoid_basisfunc可將資料代入sigmoid基底函數，Weight來計算權重，RMS則用來計算最後的root mean square。並用上題決定好的feature來降低模型的複雜度，減少over-fitting。
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statistics

x = pd.read_csv('data_X.csv').drop('Serial_id',axis=1)
y = pd.read_csv('data_T.csv').drop('Serial_id',axis=1)
x = (x-x.mean())/(x.std())
x = pd.concat([x,y],axis=1)
x = x.reindex(np.random.permutation(x.index))

y = y.reindex(x.index)
x_training = x.iloc[:400,:-1]
x_valid = x.iloc[400:,:-1]
y_training = pd.DataFrame(x.iloc[:400,-1])
y_valid = pd.DataFrame(x.iloc[400:,-1])

x_new_train = x.iloc[:400,[0,1,4,5,6]]
x_new_valid = x.iloc[400:,[0,1,4,5,6]]
x_new_train

def sigmoid_basisfunc(data):
    new_data = pd.DataFrame()
    for i in range(data.shape[1]):
        temp = pd.DataFrame(data.iloc[:,i]).applymap(lambda x:1/(1+np.exp(-x))) #輸入的data要先做好標準化才行
        new_data = pd.concat([new_data,temp],axis = 1) 
    return new_data #回傳已經代入sigmoid bisis的input

def Weight(x,y,Lambda=0):
    x = pd.concat([pd.Series(1,index=x.index,name = 'w0'),x],axis=1) #將輸入資料補上bias項
    x = x.to_numpy() #轉換成矩陣來運算
    temp = np.linalg.inv(np.eye(x.shape[1])*Lambda+np.dot(x.T,x))
    w = np.dot(np.dot(temp,x.T),y)
    return w

def RMS(x,y_training,w):
    x = pd.concat([pd.Series(1,index=x.index,name = 'w0'),x],axis=1) #將輸入資料補上bias項
    x = x.to_numpy() #轉換成矩陣來運算
    k = np.dot(x,w)
    p = k-y_training
    err = (p**2).iloc[:,0].sum()/(2*len(k))
    j = (err*2)**0.5
    return j

sigmoid_train = sigmoid_basisfunc(x_training)
sigmoid_valid = sigmoid_basisfunc(x_valid)
w_sigmoid = Weight(sigmoid_train,y_training)
print("Sigmoid basis all features\nTraining RMS = {}\nValid RMS = {}".format(RMS(sigmoid_train,y_training,w_sigmoid),RMS(sigmoid_valid,y_valid,w_sigmoid)))

sigmoid_new_train = sigmoid_basisfunc(x_new_train)
sigmoid_new_valid = sigmoid_basisfunc(x_new_valid)
w_new_sigmoid = Weight(sigmoid_new_train,y_training)
print("Sigmoid basis 5 features \nTraining RMS = {}\nValid RMS = {}".format(RMS(sigmoid_new_train,y_training,w_new_sigmoid),RMS(sigmoid_new_valid,y_valid,w_new_sigmoid)))

"""# **(c)**

使用N_fold_rms函式來計算N-fold cross-validation的結果。我使用的是N=5來驗證，x_all為全部500筆全部特徵的input資料，而x_new_500則為特徵抽取過後的資料。
"""

x_500 = x.iloc[:,[0,1,4,5,6]]
x_500

x_all = sigmoid_basisfunc(x.iloc[:,:-1])
x_all

y_500 = x.iloc[:,-1]
y_500 = pd.DataFrame(y_500)
y_500

x_new_500 = sigmoid_basisfunc(x_500)
x_new_500

def N_fold_rms(data,target,N):
    RMS_list_train = []
    RMS_list_valid = []
    seg = int(len(data)/N) 
    for i in range(N): 
        if i == N-1: #避免資料數無法剛好整除N
            xvalid = data.iloc[i*seg:,:]
            xtrain = data.drop(index = xvalid.index)
            yvalid = target.iloc[i*seg:,:]
            ytrain = target.drop(index = yvalid.index)
        else:
            xvalid = data.iloc[i*seg:i*seg+seg,:]
            xtrain = data.drop(index = xvalid.index)
            yvalid = target.iloc[i*seg:i*seg+seg,:]
            ytrain = target.drop(index = yvalid.index)
        w_train = Weight(xtrain,ytrain)
        res_train = RMS(xtrain,ytrain,w_train)
        res_valid = RMS(xvalid,yvalid,w_train)
        RMS_list_train.append(res_train)
        RMS_list_valid.append(res_valid)
    return RMS_list_train,RMS_list_valid

train_rms,valid_rms = N_fold_rms(x_all,y_500,5)
print("利用全部features的5-fold RMS\ntrain\n{}\n\n平均為:{}\n".format(train_rms,statistics.mean(train_rms)))
print("valid\n{}\n\n平均為:{}".format(valid_rms,statistics.mean(valid_rms)))

train_5features,valid_5fetures = N_fold_rms(x_new_500,y_500,5)
print("只利用5個features的5-fold RMS\ntrain\n{}\n\n平均為:{}\n".format(train_5features,statistics.mean(train_5features)))
print("valid\n{}\n\n平均為:{}".format(valid_5fetures,statistics.mean(valid_5fetures)))

plt.figure()
plt.plot([1,2,3,4,5],train_rms,'r--',label = 'training')
plt.plot([1,2,3,4,5],valid_rms,'b--',label = 'valid')
plt.title('all features')
plt.legend(loc='best')
plt.xlabel('N-fold')
plt.ylabel('RMS')

plt.figure()
plt.plot([1,2,3,4,5],train_5features,'r--',label = 'training')
plt.plot([1,2,3,4,5],valid_5fetures,'b--',label = 'valid')
plt.title('5 features')
plt.legend(loc='best')
plt.xlabel('N-fold')
plt.ylabel('RMS')

