# -*- coding: utf-8 -*-
"""HW1_3.(2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QtzYVpWebKHv63Ti8N-tTaUXdQcYcgR-

# **(b)**

此部分為最後一天下午才發現忽略了MAP也要做N fold的部分，在此補上。
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statistics

x = pd.read_csv('data_X.csv').drop('Serial_id',axis=1)
y = pd.read_csv('data_T.csv').drop('Serial_id',axis=1)
x = (x-x.mean())/(x.std())
x = pd.concat([x,y],axis=1)
x = x.reindex(np.random.permutation(x.index))

x_train = x.iloc[:,[0,1,4,5,6]]
y_train = pd.DataFrame(x.iloc[:,-1])

def sigmoid_basisfunc(data):
    new_data = pd.DataFrame()
    for i in range(data.shape[1]):
        temp = pd.DataFrame(data.iloc[:,i]).applymap(lambda x:1/(1+np.exp(-x))) #輸入的data要先做好標準化才行
        new_data = pd.concat([new_data,temp],axis = 1) 
    return new_data #回傳已經代入sigmoid bisis的input

def Weight(x,y,Lambda=0):
    x = pd.concat([pd.Series(1,index=x.index,name = 'w0'),x],axis=1) #將輸入資料補上bias項
    x = x.to_numpy() #轉換成矩陣來運算
    temp = np.linalg.inv(np.eye(x.shape[1])*Lambda+np.dot(x.T,x))
    w = np.dot(np.dot(temp,x.T),y)
    return w

def RMS(x,y,w):
    x = pd.concat([pd.Series(1,index=x.index,name = 'w0'),x],axis=1) #將輸入資料補上bias項
    x = x.to_numpy() #轉換成矩陣來運算
    k = np.dot(x,w)
    p = k-y
    err = (p**2).iloc[:,0].sum()/(2*len(k))
    j = (err*2)**0.5
    return j

train_sigmoid = sigmoid_basisfunc(x_train)

train_sigmoid #已套入基底函數的500筆資料

def N_fold_rms(data,target,N,Lambda=0):#多設定了Lambda作為MAP參數使用
    RMS_list_train = []
    RMS_list_valid = []
    seg = int(len(data)/N) 
    for i in range(N): 
        if i == N-1: #避免資料數無法剛好整除N
            xvalid = data.iloc[i*seg:,:]
            xtrain = data.drop(index = xvalid.index)
            yvalid = target.iloc[i*seg:,:]
            ytrain = target.drop(index = yvalid.index)
        else:
            xvalid = data.iloc[i*seg:i*seg+seg,:]
            xtrain = data.drop(index = xvalid.index)
            yvalid = target.iloc[i*seg:i*seg+seg,:]
            ytrain = target.drop(index = yvalid.index)
        w_train = Weight(xtrain,ytrain,Lambda)
        res_train = RMS(xtrain,ytrain,w_train)
        res_valid = RMS(xvalid,yvalid,w_train)
        RMS_list_train.append(res_train)
        RMS_list_valid.append(res_valid)
    print("Lambda = {}的5-fold RMS\ntrain\n{}\n\n平均為:{}\n".format(Lambda,RMS_list_train,statistics.mean(RMS_list_train)))
    print("valid\n{}\n\n平均為:{}\n".format(RMS_list_valid,statistics.mean(RMS_list_valid)))
    return RMS_list_train,RMS_list_valid

lambda_list = [0,0.01,0.1,1,10,30]
for i in lambda_list:
  N_fold_rms(train_sigmoid,y_train,5,i)

